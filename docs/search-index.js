var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["batsim"] = {"doc":"","items":[[0,"json_protocol","batsim","",null,null],[3,"Job","batsim::json_protocol","",null,null],[12,"id","","",0,null],[12,"res","","",0,null],[12,"profile","","",0,null],[12,"subtime","","",0,null],[12,"walltime","","",0,null],[3,"BatsimMessage","","",null,null],[12,"now","","",1,null],[12,"events","","",1,null],[3,"SubmitJob","","",null,null],[12,"job_id","","",2,null],[12,"job","","",2,null],[12,"profile","","",2,null],[3,"Notify","","",null,null],[12,"notify_type","","",3,null],[3,"JobSubmitted","","",null,null],[12,"job_id","","",4,null],[12,"job","","",4,null],[12,"profile","","",4,null],[3,"RejectJob","","",null,null],[12,"job_id","","",5,null],[3,"ExecuteJob","","",null,null],[12,"job_id","","",6,null],[12,"alloc","","",6,null],[3,"KillJob","","",null,null],[12,"job_ids","","",7,null],[3,"JobKilled","","",null,null],[12,"job_ids","","",8,null],[3,"JobCompleted","","",null,null],[12,"job_id","","",9,null],[12,"status","","",9,null],[3,"SimulationBegins","","",null,null],[12,"config","","",10,null],[12,"nb_resources","","",10,null],[4,"Profile","","",null,null],[13,"Delay","","",11,null],[12,"delay","batsim::json_protocol::Profile","",11,null],[13,"MsgParHg","batsim::json_protocol","",11,null],[12,"com","batsim::json_protocol::Profile","",11,null],[12,"cpu","","",11,null],[4,"BatsimEvent","batsim::json_protocol","",null,null],[13,"SIMULATION_BEGINS","","From batsim to sched",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"JOB_SUBMITTED","batsim::json_protocol","",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"SIMULATION_ENDS","batsim::json_protocol","",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[13,"JOB_COMPLETED","batsim::json_protocol","",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"JOB_KILLED","batsim::json_protocol","",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"EXECUTE_JOB","batsim::json_protocol","From sched to batsim",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"REJECT_JOB","batsim::json_protocol","",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"KILL_JOB","batsim::json_protocol","",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"SUBMIT_JOB","batsim::json_protocol","Dynamic submit feature",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[13,"NOTIFY","batsim::json_protocol","",12,null],[12,"timestamp","batsim::json_protocol::BatsimEvent","",12,null],[12,"data","","",12,null],[11,"fmt","batsim::json_protocol","",0,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"fmt","","",12,null],[0,"batsim","batsim","",null,null],[3,"Batsim","batsim::batsim","",null,null],[5,"allocate_job_event","","",null,{"inputs":[{"name":"f64"},{"name":"job"},{"name":"string"}],"output":{"name":"batsimevent"}}],[5,"reject_job_event","","",null,{"inputs":[{"name":"f64"},{"name":"job"}],"output":{"name":"batsimevent"}}],[5,"notify_event","","",null,{"inputs":[{"name":"f64"},{"name":"string"}],"output":{"name":"batsimevent"}}],[5,"submit_job_event","","",null,{"inputs":[{"name":"f64"},{"name":"job"},{"name":"option"}],"output":{"name":"batsimevent"}}],[5,"kill_jobs_event","","",null,{"inputs":[{"name":"f64"},{"name":"vec"}],"output":{"name":"batsimevent"}}],[5,"read_batsim_message","","Convert a json fromated string into a typed rust struct `BatsimMessage`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Scheduler","","Base trait to implement scheduler for batsim.",null,null],[10,"simulation_begins","","When the simulation in started, batsim will call `simulation_begins` to give to the\nscheduler information on the simulations such as the number of resourcs available a\nconfiguration (optional) and the original timestamp.",13,null],[10,"on_job_submission","","When batsim receive a job from the submiter it will inform the scheduler.\nThis function can return an array of Batsim event to send back to batsim.",13,null],[10,"on_job_completed","","When a job is finished batsim will inform the scheduler with this function.",13,null],[10,"on_job_killed","","When the scheduler kill on or several jobs batsim acknoiwledge by sending back the id of\nthe killed job.",13,null],[10,"on_message_received_end","","The function is called at the reception of a message\nBefore loop trhough each event and call `on_*` functions.",13,null],[10,"on_message_received_begin","","The function is called just before sending back events to batsim.",13,null],[10,"on_simulation_ends","","This function is called a the end of the simulation.\nThe timestamp is mutable so we can let the scheduler\nthe time it it spend on schedling",13,null],[11,"split_id","batsim::json_protocol","Split the job id in two parts `(workload id, job id)` as defined n batsim.",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"new","batsim::batsim","Constructs a new `Batsim`.",14,{"inputs":[{"name":"scheduler"}],"output":{"name":"batsim"}}],[11,"init","","",14,null],[11,"get_next_message","","",14,null],[11,"pull_network_message","","",14,null],[11,"get_nop","","",14,null],[11,"send_message","","",14,null],[11,"run_simulation","","",14,null]],"paths":[[3,"Job"],[3,"BatsimMessage"],[3,"SubmitJob"],[3,"Notify"],[3,"JobSubmitted"],[3,"RejectJob"],[3,"ExecuteJob"],[3,"KillJob"],[3,"JobKilled"],[3,"JobCompleted"],[3,"SimulationBegins"],[4,"Profile"],[4,"BatsimEvent"],[8,"Scheduler"],[3,"Batsim"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,null],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[4,"LogTarget","","Log target, either stdout or stderr.",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"new","","Initializes the log builder with defaults",1,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",1,null],[11,"format","","Sets the format function for formatting the log output.",1,null],[11,"target","","Sets the target for the log output.",1,null],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",1,null],[11,"init","","Initializes the global logger with an env logger.",1,null],[11,"build","","Build an env logger.",1,null],[11,"new","","",2,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",2,null],[11,"enabled","","",2,null],[11,"log","","",2,null]],"paths":[[4,"LogTarget"],[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",44,null],[12,"msg_len","","",44,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",45,null],[12,"aio_lio_opcode","","",45,null],[12,"aio_reqprio","","",45,null],[12,"aio_buf","","",45,null],[12,"aio_nbytes","","",45,null],[12,"aio_sigevent","","",45,null],[12,"aio_offset","","",45,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",46,null],[12,"e_exit","","",46,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",47,null],[12,"tv_usec","","",47,null],[3,"utmpx","","",null,null],[12,"ut_type","","",48,null],[12,"ut_pid","","",48,null],[12,"ut_line","","",48,null],[12,"ut_id","","",48,null],[12,"ut_user","","",48,null],[12,"ut_host","","",48,null],[12,"ut_exit","","",48,null],[12,"ut_session","","",48,null],[12,"ut_tv","","",48,null],[12,"ut_addr_v6","","",48,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",49,null],[12,"sa_mask","","",49,null],[12,"sa_flags","","",49,null],[12,"sa_restorer","","",49,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",50,null],[12,"ss_flags","","",50,null],[12,"ss_size","","",50,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",51,null],[12,"si_errno","","",51,null],[12,"si_code","","",51,null],[12,"_pad","","",51,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",52,null],[12,"gl_pathv","","",52,null],[12,"gl_offs","","",52,null],[12,"gl_flags","","",52,null],[3,"ucred","","",null,null],[12,"pid","","",53,null],[12,"uid","","",53,null],[12,"gid","","",53,null],[3,"statfs","","",null,null],[12,"f_type","","",54,null],[12,"f_bsize","","",54,null],[12,"f_blocks","","",54,null],[12,"f_bfree","","",54,null],[12,"f_bavail","","",54,null],[12,"f_files","","",54,null],[12,"f_ffree","","",54,null],[12,"f_fsid","","",54,null],[12,"f_namelen","","",54,null],[12,"f_frsize","","",54,null],[3,"msghdr","","",null,null],[12,"msg_name","","",55,null],[12,"msg_namelen","","",55,null],[12,"msg_iov","","",55,null],[12,"msg_iovlen","","",55,null],[12,"msg_control","","",55,null],[12,"msg_controllen","","",55,null],[12,"msg_flags","","",55,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",56,null],[12,"cmsg_level","","",56,null],[12,"cmsg_type","","",56,null],[3,"termios","","",null,null],[12,"c_iflag","","",57,null],[12,"c_oflag","","",57,null],[12,"c_cflag","","",57,null],[12,"c_lflag","","",57,null],[12,"c_line","","",57,null],[12,"c_cc","","",57,null],[12,"c_ispeed","","",57,null],[12,"c_ospeed","","",57,null],[3,"flock","","",null,null],[12,"l_type","","",58,null],[12,"l_whence","","",58,null],[12,"l_start","","",58,null],[12,"l_len","","",58,null],[12,"l_pid","","",58,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",59,null],[12,"loads","","",59,null],[12,"totalram","","",59,null],[12,"freeram","","",59,null],[12,"sharedram","","",59,null],[12,"bufferram","","",59,null],[12,"totalswap","","",59,null],[12,"freeswap","","",59,null],[12,"procs","","",59,null],[12,"pad","","",59,null],[12,"totalhigh","","",59,null],[12,"freehigh","","",59,null],[12,"mem_unit","","",59,null],[12,"_f","","",59,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",60,null],[12,"msg_stime","","",60,null],[12,"msg_rtime","","",60,null],[12,"msg_ctime","","",60,null],[12,"msg_qnum","","",60,null],[12,"msg_qbytes","","",60,null],[12,"msg_lspid","","",60,null],[12,"msg_lrpid","","",60,null],[3,"stat","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"stat64","","",null,null],[12,"st_dev","","",62,null],[12,"st_ino","","",62,null],[12,"st_nlink","","",62,null],[12,"st_mode","","",62,null],[12,"st_uid","","",62,null],[12,"st_gid","","",62,null],[12,"st_rdev","","",62,null],[12,"st_size","","",62,null],[12,"st_blksize","","",62,null],[12,"st_blocks","","",62,null],[12,"st_atime","","",62,null],[12,"st_atime_nsec","","",62,null],[12,"st_mtime","","",62,null],[12,"st_mtime_nsec","","",62,null],[12,"st_ctime","","",62,null],[12,"st_ctime_nsec","","",62,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",63,null],[12,"exponent","","",63,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",64,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",65,null],[12,"swd","","",65,null],[12,"ftw","","",65,null],[12,"fop","","",65,null],[12,"rip","","",65,null],[12,"rdp","","",65,null],[12,"mxcsr","","",65,null],[12,"mxcr_mask","","",65,null],[12,"_st","","",65,null],[12,"_xmm","","",65,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",66,null],[12,"fpregs","","",66,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",67,null],[12,"uc_link","","",67,null],[12,"uc_stack","","",67,null],[12,"uc_mcontext","","",67,null],[12,"uc_sigmask","","",67,null],[3,"ipc_perm","","",null,null],[12,"__key","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[12,"cuid","","",68,null],[12,"cgid","","",68,null],[12,"mode","","",68,null],[12,"__seq","","",68,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",69,null],[12,"shm_segsz","","",69,null],[12,"shm_atime","","",69,null],[12,"shm_dtime","","",69,null],[12,"shm_ctime","","",69,null],[12,"shm_cpid","","",69,null],[12,"shm_lpid","","",69,null],[12,"shm_nattch","","",69,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_atfork","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",61,null],[11,"clone","","",62,null],[11,"clone","","",70,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",71,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",72,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",73,null],[11,"clone","","",74,null],[11,"clone","","",75,null],[11,"clone","","",76,null],[11,"clone","","",77,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",78,null],[11,"clone","","",41,null],[11,"clone","","",79,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",80,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"ENOATTR","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message. This structure is primarily used as a\nparameter in the [`log`] method of the [`Log`] trait.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework.",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"fmt","","",3,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"hash","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,null],[11,"next_back","","",0,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,null],[11,"new","","Create a new Memchr2 that&#39;s initalized to zero with a haystack",2,null],[11,"next","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\nthe type.",10,null],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\nof the type.",11,null],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\nof the type.",12,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[11,"to_degrees","","Converts radians to degrees.",14,null],[11,"to_radians","","Converts degrees to radians.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",19,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",19,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",19,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",19,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",19,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",19,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",19,null],[10,"swap_bytes","","Reverses the byte order of the integer.",19,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",19,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",19,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values,\ncomparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking\nthe second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the\nsecond operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations\ntaking the second operand by reference.",null,null],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with [Macros\n1.1](https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md).","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&amp;str` so it interpolates as a byte-string: `b&quot;abc&quot;`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,null],[11,"append_all","","For use by `ToTokens` implementations.",2,null],[11,"append_separated","","For use by `ToTokens` implementations.",2,null],[11,"append_terminated","","For use by `ToTokens` implementations.",2,null],[11,"as_str","","",2,null],[11,"into_string","","",2,null],[11,"parse","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,null],[11,"as_ref","","",2,null],[11,"fmt","","",0,null],[11,"to_tokens","","",0,null],[11,"to_tokens","","",2,null],[11,"fmt","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",1,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"to_tokens","","",3,null],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,null],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they\nappear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they\nappear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",6,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",7,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,null],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,null],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,null],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,null],[11,"fmt","","Shows the original regular expression.",9,null],[11,"fmt","","Shows the original regular expression.",9,null],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,null],[11,"capture_names","","Returns an iterator over the capture names.",9,null],[11,"captures_len","","Returns the number of captures.",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"next","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If\n`i` does not correspond to a capture group, or if the capture group\ndid not participate in the match, then `None` is returned.",15,null],[11,"name","","Returns the match for the capture group named `name`. If `name` isn&#39;t a\nvalid capture group or didn&#39;t match anything, then `None` is returned.",15,null],[11,"iter","","An iterator that yields all capturing matches in the order in which\nthey appear in the regex. If a particular capture group didn&#39;t\nparticipate in the match, then `None` is yielded for that capture.",15,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,null],[11,"fmt","","",15,null],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",17,null],[11,"new","","Create a new regex set with the given regular expressions.",17,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",17,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",17,null],[11,"len","","Returns the total number of regular expressions in this set.",17,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"matched_any","","Whether this set contains any matches.",18,null],[11,"matched","","Whether the regex at the given index matched.",18,null],[11,"len","","The total number of regexes in the set that created these matches.",18,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",18,null],[11,"into_iter","","",18,null],[11,"next","","",19,null],[11,"next_back","","",19,null],[11,"clone","","",20,null],[11,"next","","",20,null],[11,"next_back","","",20,null],[11,"fmt","","",17,null],[11,"clone","regex::bytes","",21,null],[11,"new","","Create a new regex set with the given regular expressions.",21,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",21,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",21,null],[11,"len","","Returns the total number of regular expressions in this set.",21,null],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"matched_any","","Whether this set contains any matches.",22,null],[11,"matched","","Whether the regex at the given index matched.",22,null],[11,"len","","The total number of regexes in the set that created these matches.",22,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",22,null],[11,"into_iter","","",22,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"clone","","",24,null],[11,"next","","",24,null],[11,"next_back","","",24,null],[11,"fmt","","",21,null],[11,"clone","regex","",25,null],[11,"fmt","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"start","","Returns the starting byte offset of the match in the haystack.",25,null],[11,"end","","Returns the ending byte offset of the match in the haystack.",25,null],[11,"as_str","","Returns the matched text.",25,null],[11,"clone","","",26,null],[11,"fmt","","Shows the original regular expression.",26,null],[11,"fmt","","Shows the original regular expression.",26,null],[11,"from_str","","Attempts to parse a string into a regular expression",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",26,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",26,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",26,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",26,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about capturing group matches.",26,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",26,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",26,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",26,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",26,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",26,null],[11,"shortest_match","","Returns the end location of a match in the text given.",26,null],[11,"as_str","","Returns the original string of this regex.",26,null],[11,"capture_names","","Returns an iterator over the capture names.",26,null],[11,"captures_len","","Returns the number of captures.",26,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"next","","",28,null],[11,"next","","",29,null],[11,"get","","Returns the match associated with the capture group at index `i`. If\n`i` does not correspond to a capture group, or if the capture group\ndid not participate in the match, then `None` is returned.",30,null],[11,"name","","Returns the match for the capture group named `name`. If `name` isn&#39;t a\nvalid capture group or didn&#39;t match anything, then `None` is returned.",30,null],[11,"iter","","An iterator that yields all capturing matches in the order in which\nthey appear in the regex. If a particular capture group didn&#39;t\nparticipate in the match, then `None` is yielded for that capture.",30,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",30,null],[11,"len","","Returns the number of captured groups.",30,null],[11,"fmt","","",30,null],[11,"index","","",30,null],[11,"index","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[11,"replace_append","","",0,null],[11,"no_expansion","","",0,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",34,null],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,null],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[13,"UnsupportedClassChar","","Indicates that unsupported notation was used in a character class.",4,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",6,null],[11,"cmp","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed\nfrom the suffix of each literal.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",7,null],[11,"into_iter","","",7,null],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,null],[11,"remove","","Removes the given character from the class if it exists.",7,null],[11,"negate","","Negates the character class.",7,null],[11,"case_fold","","Apply case folding to this character class.",7,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,null],[11,"remove","","Removes the given byte from the class if it exists.",8,null],[11,"negate","","Negates the byte class.",8,null],[11,"case_fold","","Apply case folding to this byte class.",8,null],[11,"deref","","",8,null],[11,"into_iter","","",8,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",7,null],[11,"fmt","","",0,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,null],[11,"kind","","Returns the type of the regex parse error.",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["serde"] = {"doc":"# Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support\nserializing one of the compound types.",null,null],[11,"serialize_element","","",0,null],[11,"end","","",0,null],[11,"serialize_element","","",0,null],[11,"end","","",0,null],[11,"serialize_field","","",0,null],[11,"end","","",0,null],[11,"serialize_field","","",0,null],[11,"end","","",0,null],[11,"serialize_key","","",0,null],[11,"serialize_value","","",0,null],[11,"end","","",0,null],[11,"serialize_field","","",0,null],[11,"end","","",0,null],[11,"serialize_field","","",0,null],[11,"end","","",0,null],[8,"Error","","Trait used by `Serialize` implementations to generically construct\nerrors belonging to the `Serializer` against which they are\ncurrently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error\nwhile serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an [`io::Write`] or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the\nsequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of\nthe tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the\ncontent of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the\ncontent of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the\nmap.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of\nthe struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the\ncontent of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,null],[10,"serialize_i8","","Serialize an `i8` value.",3,null],[10,"serialize_i16","","Serialize an `i16` value.",3,null],[10,"serialize_i32","","Serialize an `i32` value.",3,null],[10,"serialize_i64","","Serialize an `i64` value.",3,null],[10,"serialize_u8","","Serialize a `u8` value.",3,null],[10,"serialize_u16","","Serialize a `u16` value.",3,null],[10,"serialize_u32","","Serialize a `u32` value.",3,null],[10,"serialize_u64","","Serialize a `u64` value.",3,null],[10,"serialize_f32","","Serialize an `f32` value.",3,null],[10,"serialize_f64","","Serialize an `f64` value.",3,null],[10,"serialize_char","","Serialize a character.",3,null],[10,"serialize_str","","Serialize a `&amp;str`.",3,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,null],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,null],[10,"serialize_unit","","Serialize a `()` value.",3,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",3,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,null],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",3,null],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",3,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",3,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",3,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",3,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",3,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",3,null],[11,"collect_seq","","Collect an iterator as a sequence.",3,null],[11,"collect_map","","Collect an iterator as a map.",3,null],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,null],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,null],[10,"end","","Finish serializing a sequence.",4,null],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,null],[10,"end","","Finish serializing a tuple.",5,null],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,null],[10,"end","","Finish serializing a tuple struct.",6,null],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,null],[10,"end","","Finish serializing a tuple variant.",7,null],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,null],[10,"serialize_value","","Serialize a map value.",8,null],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,null],[10,"end","","Finish serializing a map.",8,null],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,null],[10,"end","","Finish serializing a struct.",9,null],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,null],[10,"end","","Finish serializing a struct variant.",10,null],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor`\ntrait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\nwas not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\nwas not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not\nexpected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&amp;str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&amp;[u8]` or `Vec&lt;u8&gt;` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option&lt;T&gt;` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was\nnot expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer`\ntrait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the\n`IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding\na `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding\nan `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding\nan `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding\nan `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding\nan `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding\nan `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding\na `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding\na `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding\na `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding\na `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding\nan `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding\nan `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding\na `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&amp;str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&amp;str` with a lifetime tied to another\ndeserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow&lt;str&gt;`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&amp;[u8]` with a lifetime tied to another\ndeserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,null],[11,"description","","",12,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_byte_buf","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,null],[11,"deserialize_ignored_any","","",13,null],[11,"deserialize_any","","",13,null],[11,"deserialize_option","","",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"deserialize_bool","","",14,null],[11,"deserialize_i8","","",14,null],[11,"deserialize_i16","","",14,null],[11,"deserialize_i32","","",14,null],[11,"deserialize_i64","","",14,null],[11,"deserialize_u8","","",14,null],[11,"deserialize_u16","","",14,null],[11,"deserialize_u32","","",14,null],[11,"deserialize_u64","","",14,null],[11,"deserialize_f32","","",14,null],[11,"deserialize_f64","","",14,null],[11,"deserialize_char","","",14,null],[11,"deserialize_str","","",14,null],[11,"deserialize_string","","",14,null],[11,"deserialize_bytes","","",14,null],[11,"deserialize_byte_buf","","",14,null],[11,"deserialize_option","","",14,null],[11,"deserialize_unit","","",14,null],[11,"deserialize_unit_struct","","",14,null],[11,"deserialize_newtype_struct","","",14,null],[11,"deserialize_seq","","",14,null],[11,"deserialize_tuple","","",14,null],[11,"deserialize_tuple_struct","","",14,null],[11,"deserialize_map","","",14,null],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,null],[11,"deserialize_ignored_any","","",14,null],[11,"deserialize_any","","",14,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"deserialize_bool","","",15,null],[11,"deserialize_i8","","",15,null],[11,"deserialize_i16","","",15,null],[11,"deserialize_i32","","",15,null],[11,"deserialize_i64","","",15,null],[11,"deserialize_u8","","",15,null],[11,"deserialize_u16","","",15,null],[11,"deserialize_u32","","",15,null],[11,"deserialize_u64","","",15,null],[11,"deserialize_f32","","",15,null],[11,"deserialize_f64","","",15,null],[11,"deserialize_char","","",15,null],[11,"deserialize_str","","",15,null],[11,"deserialize_string","","",15,null],[11,"deserialize_bytes","","",15,null],[11,"deserialize_byte_buf","","",15,null],[11,"deserialize_option","","",15,null],[11,"deserialize_unit","","",15,null],[11,"deserialize_unit_struct","","",15,null],[11,"deserialize_newtype_struct","","",15,null],[11,"deserialize_seq","","",15,null],[11,"deserialize_tuple","","",15,null],[11,"deserialize_tuple_struct","","",15,null],[11,"deserialize_map","","",15,null],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,null],[11,"deserialize_ignored_any","","",15,null],[11,"deserialize_any","","",15,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"deserialize_bool","","",16,null],[11,"deserialize_i8","","",16,null],[11,"deserialize_i16","","",16,null],[11,"deserialize_i32","","",16,null],[11,"deserialize_i64","","",16,null],[11,"deserialize_u8","","",16,null],[11,"deserialize_u16","","",16,null],[11,"deserialize_u32","","",16,null],[11,"deserialize_u64","","",16,null],[11,"deserialize_f32","","",16,null],[11,"deserialize_f64","","",16,null],[11,"deserialize_char","","",16,null],[11,"deserialize_str","","",16,null],[11,"deserialize_string","","",16,null],[11,"deserialize_bytes","","",16,null],[11,"deserialize_byte_buf","","",16,null],[11,"deserialize_option","","",16,null],[11,"deserialize_unit","","",16,null],[11,"deserialize_unit_struct","","",16,null],[11,"deserialize_newtype_struct","","",16,null],[11,"deserialize_seq","","",16,null],[11,"deserialize_tuple","","",16,null],[11,"deserialize_tuple_struct","","",16,null],[11,"deserialize_map","","",16,null],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,null],[11,"deserialize_ignored_any","","",16,null],[11,"deserialize_any","","",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"deserialize_bool","","",17,null],[11,"deserialize_i8","","",17,null],[11,"deserialize_i16","","",17,null],[11,"deserialize_i32","","",17,null],[11,"deserialize_i64","","",17,null],[11,"deserialize_u8","","",17,null],[11,"deserialize_u16","","",17,null],[11,"deserialize_u32","","",17,null],[11,"deserialize_u64","","",17,null],[11,"deserialize_f32","","",17,null],[11,"deserialize_f64","","",17,null],[11,"deserialize_char","","",17,null],[11,"deserialize_str","","",17,null],[11,"deserialize_string","","",17,null],[11,"deserialize_bytes","","",17,null],[11,"deserialize_byte_buf","","",17,null],[11,"deserialize_option","","",17,null],[11,"deserialize_unit","","",17,null],[11,"deserialize_unit_struct","","",17,null],[11,"deserialize_newtype_struct","","",17,null],[11,"deserialize_seq","","",17,null],[11,"deserialize_tuple","","",17,null],[11,"deserialize_tuple_struct","","",17,null],[11,"deserialize_map","","",17,null],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,null],[11,"deserialize_ignored_any","","",17,null],[11,"deserialize_any","","",17,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"deserialize_bool","","",18,null],[11,"deserialize_i8","","",18,null],[11,"deserialize_i16","","",18,null],[11,"deserialize_i32","","",18,null],[11,"deserialize_i64","","",18,null],[11,"deserialize_u8","","",18,null],[11,"deserialize_u16","","",18,null],[11,"deserialize_u32","","",18,null],[11,"deserialize_u64","","",18,null],[11,"deserialize_f32","","",18,null],[11,"deserialize_f64","","",18,null],[11,"deserialize_char","","",18,null],[11,"deserialize_str","","",18,null],[11,"deserialize_string","","",18,null],[11,"deserialize_bytes","","",18,null],[11,"deserialize_byte_buf","","",18,null],[11,"deserialize_option","","",18,null],[11,"deserialize_unit","","",18,null],[11,"deserialize_unit_struct","","",18,null],[11,"deserialize_newtype_struct","","",18,null],[11,"deserialize_seq","","",18,null],[11,"deserialize_tuple","","",18,null],[11,"deserialize_tuple_struct","","",18,null],[11,"deserialize_map","","",18,null],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,null],[11,"deserialize_ignored_any","","",18,null],[11,"deserialize_any","","",18,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"deserialize_bool","","",19,null],[11,"deserialize_i8","","",19,null],[11,"deserialize_i16","","",19,null],[11,"deserialize_i32","","",19,null],[11,"deserialize_i64","","",19,null],[11,"deserialize_u8","","",19,null],[11,"deserialize_u16","","",19,null],[11,"deserialize_u32","","",19,null],[11,"deserialize_u64","","",19,null],[11,"deserialize_f32","","",19,null],[11,"deserialize_f64","","",19,null],[11,"deserialize_char","","",19,null],[11,"deserialize_str","","",19,null],[11,"deserialize_string","","",19,null],[11,"deserialize_bytes","","",19,null],[11,"deserialize_byte_buf","","",19,null],[11,"deserialize_option","","",19,null],[11,"deserialize_unit","","",19,null],[11,"deserialize_unit_struct","","",19,null],[11,"deserialize_newtype_struct","","",19,null],[11,"deserialize_seq","","",19,null],[11,"deserialize_tuple","","",19,null],[11,"deserialize_tuple_struct","","",19,null],[11,"deserialize_map","","",19,null],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,null],[11,"deserialize_ignored_any","","",19,null],[11,"deserialize_any","","",19,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"deserialize_bool","","",20,null],[11,"deserialize_i8","","",20,null],[11,"deserialize_i16","","",20,null],[11,"deserialize_i32","","",20,null],[11,"deserialize_i64","","",20,null],[11,"deserialize_u8","","",20,null],[11,"deserialize_u16","","",20,null],[11,"deserialize_u32","","",20,null],[11,"deserialize_u64","","",20,null],[11,"deserialize_f32","","",20,null],[11,"deserialize_f64","","",20,null],[11,"deserialize_char","","",20,null],[11,"deserialize_str","","",20,null],[11,"deserialize_string","","",20,null],[11,"deserialize_bytes","","",20,null],[11,"deserialize_byte_buf","","",20,null],[11,"deserialize_option","","",20,null],[11,"deserialize_unit","","",20,null],[11,"deserialize_unit_struct","","",20,null],[11,"deserialize_newtype_struct","","",20,null],[11,"deserialize_seq","","",20,null],[11,"deserialize_tuple","","",20,null],[11,"deserialize_tuple_struct","","",20,null],[11,"deserialize_map","","",20,null],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,null],[11,"deserialize_ignored_any","","",20,null],[11,"deserialize_any","","",20,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"deserialize_bool","","",21,null],[11,"deserialize_i8","","",21,null],[11,"deserialize_i16","","",21,null],[11,"deserialize_i32","","",21,null],[11,"deserialize_i64","","",21,null],[11,"deserialize_u8","","",21,null],[11,"deserialize_u16","","",21,null],[11,"deserialize_u32","","",21,null],[11,"deserialize_u64","","",21,null],[11,"deserialize_f32","","",21,null],[11,"deserialize_f64","","",21,null],[11,"deserialize_char","","",21,null],[11,"deserialize_str","","",21,null],[11,"deserialize_string","","",21,null],[11,"deserialize_bytes","","",21,null],[11,"deserialize_byte_buf","","",21,null],[11,"deserialize_option","","",21,null],[11,"deserialize_unit","","",21,null],[11,"deserialize_unit_struct","","",21,null],[11,"deserialize_newtype_struct","","",21,null],[11,"deserialize_seq","","",21,null],[11,"deserialize_tuple","","",21,null],[11,"deserialize_tuple_struct","","",21,null],[11,"deserialize_map","","",21,null],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,null],[11,"deserialize_ignored_any","","",21,null],[11,"deserialize_any","","",21,null],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"deserialize_bool","","",22,null],[11,"deserialize_i8","","",22,null],[11,"deserialize_i16","","",22,null],[11,"deserialize_i32","","",22,null],[11,"deserialize_i64","","",22,null],[11,"deserialize_u8","","",22,null],[11,"deserialize_u16","","",22,null],[11,"deserialize_u32","","",22,null],[11,"deserialize_u64","","",22,null],[11,"deserialize_f32","","",22,null],[11,"deserialize_f64","","",22,null],[11,"deserialize_char","","",22,null],[11,"deserialize_str","","",22,null],[11,"deserialize_string","","",22,null],[11,"deserialize_bytes","","",22,null],[11,"deserialize_byte_buf","","",22,null],[11,"deserialize_option","","",22,null],[11,"deserialize_unit","","",22,null],[11,"deserialize_unit_struct","","",22,null],[11,"deserialize_newtype_struct","","",22,null],[11,"deserialize_seq","","",22,null],[11,"deserialize_tuple","","",22,null],[11,"deserialize_tuple_struct","","",22,null],[11,"deserialize_map","","",22,null],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,null],[11,"deserialize_ignored_any","","",22,null],[11,"deserialize_any","","",22,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"deserialize_bool","","",23,null],[11,"deserialize_i8","","",23,null],[11,"deserialize_i16","","",23,null],[11,"deserialize_i32","","",23,null],[11,"deserialize_i64","","",23,null],[11,"deserialize_u8","","",23,null],[11,"deserialize_u16","","",23,null],[11,"deserialize_u32","","",23,null],[11,"deserialize_u64","","",23,null],[11,"deserialize_f32","","",23,null],[11,"deserialize_f64","","",23,null],[11,"deserialize_char","","",23,null],[11,"deserialize_str","","",23,null],[11,"deserialize_string","","",23,null],[11,"deserialize_bytes","","",23,null],[11,"deserialize_byte_buf","","",23,null],[11,"deserialize_option","","",23,null],[11,"deserialize_unit","","",23,null],[11,"deserialize_unit_struct","","",23,null],[11,"deserialize_newtype_struct","","",23,null],[11,"deserialize_seq","","",23,null],[11,"deserialize_tuple","","",23,null],[11,"deserialize_tuple_struct","","",23,null],[11,"deserialize_map","","",23,null],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,null],[11,"deserialize_ignored_any","","",23,null],[11,"deserialize_any","","",23,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"deserialize_bool","","",24,null],[11,"deserialize_i8","","",24,null],[11,"deserialize_i16","","",24,null],[11,"deserialize_i32","","",24,null],[11,"deserialize_i64","","",24,null],[11,"deserialize_u8","","",24,null],[11,"deserialize_u16","","",24,null],[11,"deserialize_u32","","",24,null],[11,"deserialize_u64","","",24,null],[11,"deserialize_f32","","",24,null],[11,"deserialize_f64","","",24,null],[11,"deserialize_char","","",24,null],[11,"deserialize_str","","",24,null],[11,"deserialize_string","","",24,null],[11,"deserialize_bytes","","",24,null],[11,"deserialize_byte_buf","","",24,null],[11,"deserialize_option","","",24,null],[11,"deserialize_unit","","",24,null],[11,"deserialize_unit_struct","","",24,null],[11,"deserialize_newtype_struct","","",24,null],[11,"deserialize_seq","","",24,null],[11,"deserialize_tuple","","",24,null],[11,"deserialize_tuple_struct","","",24,null],[11,"deserialize_map","","",24,null],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,null],[11,"deserialize_ignored_any","","",24,null],[11,"deserialize_any","","",24,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"deserialize_bool","","",25,null],[11,"deserialize_i8","","",25,null],[11,"deserialize_i16","","",25,null],[11,"deserialize_i32","","",25,null],[11,"deserialize_i64","","",25,null],[11,"deserialize_u8","","",25,null],[11,"deserialize_u16","","",25,null],[11,"deserialize_u32","","",25,null],[11,"deserialize_u64","","",25,null],[11,"deserialize_f32","","",25,null],[11,"deserialize_f64","","",25,null],[11,"deserialize_char","","",25,null],[11,"deserialize_str","","",25,null],[11,"deserialize_string","","",25,null],[11,"deserialize_bytes","","",25,null],[11,"deserialize_byte_buf","","",25,null],[11,"deserialize_option","","",25,null],[11,"deserialize_unit","","",25,null],[11,"deserialize_unit_struct","","",25,null],[11,"deserialize_newtype_struct","","",25,null],[11,"deserialize_seq","","",25,null],[11,"deserialize_tuple","","",25,null],[11,"deserialize_tuple_struct","","",25,null],[11,"deserialize_map","","",25,null],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,null],[11,"deserialize_ignored_any","","",25,null],[11,"deserialize_any","","",25,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"deserialize_bool","","",26,null],[11,"deserialize_i8","","",26,null],[11,"deserialize_i16","","",26,null],[11,"deserialize_i32","","",26,null],[11,"deserialize_i64","","",26,null],[11,"deserialize_u8","","",26,null],[11,"deserialize_u16","","",26,null],[11,"deserialize_u32","","",26,null],[11,"deserialize_u64","","",26,null],[11,"deserialize_f32","","",26,null],[11,"deserialize_f64","","",26,null],[11,"deserialize_char","","",26,null],[11,"deserialize_str","","",26,null],[11,"deserialize_string","","",26,null],[11,"deserialize_bytes","","",26,null],[11,"deserialize_byte_buf","","",26,null],[11,"deserialize_option","","",26,null],[11,"deserialize_unit","","",26,null],[11,"deserialize_unit_struct","","",26,null],[11,"deserialize_newtype_struct","","",26,null],[11,"deserialize_seq","","",26,null],[11,"deserialize_tuple","","",26,null],[11,"deserialize_tuple_struct","","",26,null],[11,"deserialize_map","","",26,null],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,null],[11,"deserialize_ignored_any","","",26,null],[11,"deserialize_any","","",26,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"deserialize_bool","","",27,null],[11,"deserialize_i8","","",27,null],[11,"deserialize_i16","","",27,null],[11,"deserialize_i32","","",27,null],[11,"deserialize_i64","","",27,null],[11,"deserialize_u8","","",27,null],[11,"deserialize_u16","","",27,null],[11,"deserialize_u32","","",27,null],[11,"deserialize_u64","","",27,null],[11,"deserialize_f32","","",27,null],[11,"deserialize_f64","","",27,null],[11,"deserialize_char","","",27,null],[11,"deserialize_str","","",27,null],[11,"deserialize_string","","",27,null],[11,"deserialize_bytes","","",27,null],[11,"deserialize_byte_buf","","",27,null],[11,"deserialize_option","","",27,null],[11,"deserialize_unit","","",27,null],[11,"deserialize_unit_struct","","",27,null],[11,"deserialize_newtype_struct","","",27,null],[11,"deserialize_seq","","",27,null],[11,"deserialize_tuple","","",27,null],[11,"deserialize_tuple_struct","","",27,null],[11,"deserialize_map","","",27,null],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,null],[11,"deserialize_ignored_any","","",27,null],[11,"deserialize_any","","",27,null],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,null],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"deserialize_any","","",28,null],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,null],[11,"deserialize_i8","","",28,null],[11,"deserialize_i16","","",28,null],[11,"deserialize_i32","","",28,null],[11,"deserialize_i64","","",28,null],[11,"deserialize_u8","","",28,null],[11,"deserialize_u16","","",28,null],[11,"deserialize_u32","","",28,null],[11,"deserialize_u64","","",28,null],[11,"deserialize_f32","","",28,null],[11,"deserialize_f64","","",28,null],[11,"deserialize_char","","",28,null],[11,"deserialize_str","","",28,null],[11,"deserialize_string","","",28,null],[11,"deserialize_bytes","","",28,null],[11,"deserialize_byte_buf","","",28,null],[11,"deserialize_option","","",28,null],[11,"deserialize_unit","","",28,null],[11,"deserialize_unit_struct","","",28,null],[11,"deserialize_newtype_struct","","",28,null],[11,"deserialize_seq","","",28,null],[11,"deserialize_tuple","","",28,null],[11,"deserialize_tuple_struct","","",28,null],[11,"deserialize_map","","",28,null],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,null],[11,"deserialize_ignored_any","","",28,null],[11,"variant_seed","","",28,null],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,null],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,null],[11,"deserialize_i8","","",29,null],[11,"deserialize_i16","","",29,null],[11,"deserialize_i32","","",29,null],[11,"deserialize_i64","","",29,null],[11,"deserialize_u8","","",29,null],[11,"deserialize_u16","","",29,null],[11,"deserialize_u32","","",29,null],[11,"deserialize_u64","","",29,null],[11,"deserialize_f32","","",29,null],[11,"deserialize_f64","","",29,null],[11,"deserialize_char","","",29,null],[11,"deserialize_str","","",29,null],[11,"deserialize_string","","",29,null],[11,"deserialize_bytes","","",29,null],[11,"deserialize_byte_buf","","",29,null],[11,"deserialize_option","","",29,null],[11,"deserialize_unit","","",29,null],[11,"deserialize_unit_struct","","",29,null],[11,"deserialize_newtype_struct","","",29,null],[11,"deserialize_seq","","",29,null],[11,"deserialize_tuple","","",29,null],[11,"deserialize_tuple_struct","","",29,null],[11,"deserialize_map","","",29,null],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,null],[11,"deserialize_ignored_any","","",29,null],[11,"variant_seed","","",29,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"deserialize_any","","",30,null],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,null],[11,"deserialize_i8","","",30,null],[11,"deserialize_i16","","",30,null],[11,"deserialize_i32","","",30,null],[11,"deserialize_i64","","",30,null],[11,"deserialize_u8","","",30,null],[11,"deserialize_u16","","",30,null],[11,"deserialize_u32","","",30,null],[11,"deserialize_u64","","",30,null],[11,"deserialize_f32","","",30,null],[11,"deserialize_f64","","",30,null],[11,"deserialize_char","","",30,null],[11,"deserialize_str","","",30,null],[11,"deserialize_string","","",30,null],[11,"deserialize_bytes","","",30,null],[11,"deserialize_byte_buf","","",30,null],[11,"deserialize_option","","",30,null],[11,"deserialize_unit","","",30,null],[11,"deserialize_unit_struct","","",30,null],[11,"deserialize_newtype_struct","","",30,null],[11,"deserialize_seq","","",30,null],[11,"deserialize_tuple","","",30,null],[11,"deserialize_tuple_struct","","",30,null],[11,"deserialize_map","","",30,null],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,null],[11,"deserialize_ignored_any","","",30,null],[11,"variant_seed","","",30,null],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"deserialize_any","","",31,null],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,null],[11,"deserialize_i8","","",31,null],[11,"deserialize_i16","","",31,null],[11,"deserialize_i32","","",31,null],[11,"deserialize_i64","","",31,null],[11,"deserialize_u8","","",31,null],[11,"deserialize_u16","","",31,null],[11,"deserialize_u32","","",31,null],[11,"deserialize_u64","","",31,null],[11,"deserialize_f32","","",31,null],[11,"deserialize_f64","","",31,null],[11,"deserialize_char","","",31,null],[11,"deserialize_str","","",31,null],[11,"deserialize_string","","",31,null],[11,"deserialize_bytes","","",31,null],[11,"deserialize_byte_buf","","",31,null],[11,"deserialize_option","","",31,null],[11,"deserialize_unit","","",31,null],[11,"deserialize_unit_struct","","",31,null],[11,"deserialize_newtype_struct","","",31,null],[11,"deserialize_seq","","",31,null],[11,"deserialize_tuple","","",31,null],[11,"deserialize_tuple_struct","","",31,null],[11,"deserialize_map","","",31,null],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,null],[11,"deserialize_ignored_any","","",31,null],[11,"variant_seed","","",31,null],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,null],[11,"deserialize_bool","","",32,null],[11,"deserialize_i8","","",32,null],[11,"deserialize_i16","","",32,null],[11,"deserialize_i32","","",32,null],[11,"deserialize_i64","","",32,null],[11,"deserialize_u8","","",32,null],[11,"deserialize_u16","","",32,null],[11,"deserialize_u32","","",32,null],[11,"deserialize_u64","","",32,null],[11,"deserialize_f32","","",32,null],[11,"deserialize_f64","","",32,null],[11,"deserialize_char","","",32,null],[11,"deserialize_str","","",32,null],[11,"deserialize_string","","",32,null],[11,"deserialize_bytes","","",32,null],[11,"deserialize_byte_buf","","",32,null],[11,"deserialize_option","","",32,null],[11,"deserialize_unit","","",32,null],[11,"deserialize_unit_struct","","",32,null],[11,"deserialize_newtype_struct","","",32,null],[11,"deserialize_seq","","",32,null],[11,"deserialize_tuple","","",32,null],[11,"deserialize_tuple_struct","","",32,null],[11,"deserialize_map","","",32,null],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,null],[11,"deserialize_ignored_any","","",32,null],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"new","","Construct a new `SeqDeserializer&lt;I, E&gt;`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to\n`Visitor::visit_seq`.",33,null],[11,"deserialize_any","","",33,null],[11,"deserialize_bool","","",33,null],[11,"deserialize_i8","","",33,null],[11,"deserialize_i16","","",33,null],[11,"deserialize_i32","","",33,null],[11,"deserialize_i64","","",33,null],[11,"deserialize_u8","","",33,null],[11,"deserialize_u16","","",33,null],[11,"deserialize_u32","","",33,null],[11,"deserialize_u64","","",33,null],[11,"deserialize_f32","","",33,null],[11,"deserialize_f64","","",33,null],[11,"deserialize_char","","",33,null],[11,"deserialize_str","","",33,null],[11,"deserialize_string","","",33,null],[11,"deserialize_bytes","","",33,null],[11,"deserialize_byte_buf","","",33,null],[11,"deserialize_option","","",33,null],[11,"deserialize_unit","","",33,null],[11,"deserialize_unit_struct","","",33,null],[11,"deserialize_newtype_struct","","",33,null],[11,"deserialize_seq","","",33,null],[11,"deserialize_tuple","","",33,null],[11,"deserialize_tuple_struct","","",33,null],[11,"deserialize_map","","",33,null],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,null],[11,"deserialize_ignored_any","","",33,null],[11,"next_element_seed","","",33,null],[11,"size_hint","","",33,null],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"new","","Construct a new `SeqAccessDeserializer&lt;A&gt;`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,null],[11,"deserialize_bool","","",34,null],[11,"deserialize_i8","","",34,null],[11,"deserialize_i16","","",34,null],[11,"deserialize_i32","","",34,null],[11,"deserialize_i64","","",34,null],[11,"deserialize_u8","","",34,null],[11,"deserialize_u16","","",34,null],[11,"deserialize_u32","","",34,null],[11,"deserialize_u64","","",34,null],[11,"deserialize_f32","","",34,null],[11,"deserialize_f64","","",34,null],[11,"deserialize_char","","",34,null],[11,"deserialize_str","","",34,null],[11,"deserialize_string","","",34,null],[11,"deserialize_bytes","","",34,null],[11,"deserialize_byte_buf","","",34,null],[11,"deserialize_option","","",34,null],[11,"deserialize_unit","","",34,null],[11,"deserialize_unit_struct","","",34,null],[11,"deserialize_newtype_struct","","",34,null],[11,"deserialize_seq","","",34,null],[11,"deserialize_tuple","","",34,null],[11,"deserialize_tuple_struct","","",34,null],[11,"deserialize_map","","",34,null],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,null],[11,"deserialize_ignored_any","","",34,null],[11,"new","","Construct a new `MapDeserializer&lt;I, E&gt;`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to\n`Visitor::visit_map`.",35,null],[11,"deserialize_any","","",35,null],[11,"deserialize_seq","","",35,null],[11,"deserialize_tuple","","",35,null],[11,"deserialize_bool","","",35,null],[11,"deserialize_i8","","",35,null],[11,"deserialize_i16","","",35,null],[11,"deserialize_i32","","",35,null],[11,"deserialize_i64","","",35,null],[11,"deserialize_u8","","",35,null],[11,"deserialize_u16","","",35,null],[11,"deserialize_u32","","",35,null],[11,"deserialize_u64","","",35,null],[11,"deserialize_f32","","",35,null],[11,"deserialize_f64","","",35,null],[11,"deserialize_char","","",35,null],[11,"deserialize_str","","",35,null],[11,"deserialize_string","","",35,null],[11,"deserialize_bytes","","",35,null],[11,"deserialize_byte_buf","","",35,null],[11,"deserialize_option","","",35,null],[11,"deserialize_unit","","",35,null],[11,"deserialize_unit_struct","","",35,null],[11,"deserialize_newtype_struct","","",35,null],[11,"deserialize_tuple_struct","","",35,null],[11,"deserialize_map","","",35,null],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,null],[11,"deserialize_ignored_any","","",35,null],[11,"next_key_seed","","",35,null],[11,"next_value_seed","","",35,null],[11,"next_entry_seed","","",35,null],[11,"size_hint","","",35,null],[11,"next_element_seed","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"clone","","",36,null],[11,"fmt","","",36,null],[11,"new","","Construct a new `MapAccessDeserializer&lt;A&gt;`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,null],[11,"deserialize_bool","","",36,null],[11,"deserialize_i8","","",36,null],[11,"deserialize_i16","","",36,null],[11,"deserialize_i32","","",36,null],[11,"deserialize_i64","","",36,null],[11,"deserialize_u8","","",36,null],[11,"deserialize_u16","","",36,null],[11,"deserialize_u32","","",36,null],[11,"deserialize_u64","","",36,null],[11,"deserialize_f32","","",36,null],[11,"deserialize_f64","","",36,null],[11,"deserialize_char","","",36,null],[11,"deserialize_str","","",36,null],[11,"deserialize_string","","",36,null],[11,"deserialize_bytes","","",36,null],[11,"deserialize_byte_buf","","",36,null],[11,"deserialize_option","","",36,null],[11,"deserialize_unit","","",36,null],[11,"deserialize_unit_struct","","",36,null],[11,"deserialize_newtype_struct","","",36,null],[11,"deserialize_seq","","",36,null],[11,"deserialize_tuple","","",36,null],[11,"deserialize_tuple_struct","","",36,null],[11,"deserialize_map","","",36,null],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,null],[11,"deserialize_ignored_any","","",36,null],[11,"clone","serde::de","",37,null],[11,"fmt","","",37,null],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,null],[11,"visit_bool","","",37,null],[11,"visit_i64","","",37,null],[11,"visit_u64","","",37,null],[11,"visit_f64","","",37,null],[11,"visit_str","","",37,null],[11,"visit_none","","",37,null],[11,"visit_some","","",37,null],[11,"visit_newtype_struct","","",37,null],[11,"visit_unit","","",37,null],[11,"visit_seq","","",37,null],[11,"visit_map","","",37,null],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive\nerror messages belonging to the `Deserializer` against which they are\ncurrently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was\nexpecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that\nis wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains\ntoo many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an\nunrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an\nunrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required\nfield with a particular name but that field was not present in the\ninput.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting\nto receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as\nthe `Display` and `Debug` traits.",39,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from\nthe deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you\never find yourself looking for a way to pass data into a `Deserialize` impl,\nthis trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except\nwith some initial piece of data (the seed) passed in.",41,null],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",42,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",42,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",42,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",42,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",42,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct\nfield or the discriminant of an enum variant.",42,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",42,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,null],[11,"visit_bool","","The input contains a boolean.",43,null],[11,"visit_i8","","The input contains an `i8`.",43,null],[11,"visit_i16","","The input contains an `i16`.",43,null],[11,"visit_i32","","The input contains an `i32`.",43,null],[11,"visit_i64","","The input contains an `i32`.",43,null],[11,"visit_u8","","The input contains a `u8`.",43,null],[11,"visit_u16","","The input contains a `u16`.",43,null],[11,"visit_u32","","The input contains a `u32`.",43,null],[11,"visit_u64","","The input contains a `u64`.",43,null],[11,"visit_f32","","The input contains an `f32`.",43,null],[11,"visit_f64","","The input contains an `f64`.",43,null],[11,"visit_char","","The input contains a `char`.",43,null],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and\nit may be destroyed after this method returns.",43,null],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the\n`Deserializer`.",43,null],[11,"visit_string","","The input contains a string and ownership of the string is being given\nto the `Visitor`.",43,null],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is\nephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the\n`Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being\ngiven to the `Visitor`.",43,null],[11,"visit_none","","The input contains an optional that is absent.",43,null],[11,"visit_some","","The input contains an optional that is present.",43,null],[11,"visit_unit","","The input contains a unit `()`.",43,null],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,null],[11,"visit_seq","","The input contains a sequence of elements.",43,null],[11,"visit_map","","The input contains a key-value map.",43,null],[11,"visit_enum","","The input contains an enum.",43,null],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",44,null],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",44,null],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,null],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",45,null],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,null],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",45,null],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",45,null],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,null],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",45,null],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,null],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum\nvariant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,null],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,null],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and\npassed to the `Deserialize` to deserialize the content of a particular enum\nvariant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,null],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,null],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,null],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,null],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can\nbe deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[11,"fmt","","",39,null],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported\nby Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,null],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an [`io::Write`] or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the\nsequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of\nthe tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the\ncontent of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the\ncontent of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the\nmap.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of\nthe struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the\ncontent of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,null],[10,"serialize_i8","","Serialize an `i8` value.",3,null],[10,"serialize_i16","","Serialize an `i16` value.",3,null],[10,"serialize_i32","","Serialize an `i32` value.",3,null],[10,"serialize_i64","","Serialize an `i64` value.",3,null],[10,"serialize_u8","","Serialize a `u8` value.",3,null],[10,"serialize_u16","","Serialize a `u16` value.",3,null],[10,"serialize_u32","","Serialize a `u32` value.",3,null],[10,"serialize_u64","","Serialize a `u64` value.",3,null],[10,"serialize_f32","","Serialize an `f32` value.",3,null],[10,"serialize_f64","","Serialize an `f64` value.",3,null],[10,"serialize_char","","Serialize a character.",3,null],[10,"serialize_str","","Serialize a `&amp;str`.",3,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,null],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,null],[10,"serialize_unit","","Serialize a `()` value.",3,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",3,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,null],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",3,null],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",3,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",3,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",3,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",3,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",3,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",3,null],[11,"collect_seq","","Collect an iterator as a sequence.",3,null],[11,"collect_map","","Collect an iterator as a map.",3,null],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,null],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported\nby Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by\nSerde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",42,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",42,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",42,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",42,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",42,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",42,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct\nfield or the discriminant of an enum variant.",42,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",42,null],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format\nfor Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde&#39;s two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,null],[11,"has_getter","","",3,null],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don&#39;t apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to &quot;lowercase&quot; style.",5,null],[13,"PascalCase","","Rename direct children to &quot;PascalCase&quot; style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to &quot;camelCase&quot; style.",5,null],[13,"SnakeCase","","Rename direct children to &quot;snake_case&quot; style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to &quot;SCREAMING_SNAKE_CASE&quot; style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to &quot;kebab-case&quot; style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = &quot;type&quot;)]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = &quot;t&quot;, content = &quot;c&quot;)]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an\nenum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be\nunit variants, except possibly one which is annotated with\n`#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must\nbe unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",9,null],[11,"serialize_name","","Return the container name for the container when serializing.",9,null],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,null],[11,"fmt","","",10,null],[11,"fmt","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,null],[11,"rename_all","","",10,null],[11,"deny_unknown_fields","","",10,null],[11,"default","","",10,null],[11,"ser_bound","","",10,null],[11,"de_bound","","",10,null],[11,"tag","","",10,null],[11,"from_type","","",10,null],[11,"into_type","","",10,null],[11,"remote","","",10,null],[11,"identifier","","",10,null],[11,"fmt","","",11,null],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,null],[11,"rename_by_rule","","",11,null],[11,"rename_all","","",11,null],[11,"skip_deserializing","","",11,null],[11,"skip_serializing","","",11,null],[11,"other","","",11,null],[11,"fmt","","",12,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",12,null],[11,"rename_by_rule","","",12,null],[11,"skip_serializing","","",12,null],[11,"skip_deserializing","","",12,null],[11,"skip_serializing_if","","",12,null],[11,"default","","",12,null],[11,"serialize_with","","",12,null],[11,"deserialize_with","","",12,null],[11,"ser_bound","","",12,null],[11,"de_bound","","",12,null],[11,"borrowed_lifetimes","","",12,null],[11,"getter","","",12,null],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,null],[11,"check","","",13,null],[11,"drop","","",13,null],[11,"fmt","serde_derive_internals::attr","",5,null],[11,"eq","","",5,null],[11,"apply_to_variant","","",5,null],[11,"apply_to_field","","",5,null],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_json"] = {"doc":"# Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or\ndeserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO\nstream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent\nany valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually\n&quot;specialized&quot; for iterating over &amp;[u8]. Once feature(specialization) is\nstable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input\nsources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&amp;[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&amp;str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",1,null],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,null],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json\ninput sources.",2,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",2,null],[11,"next","","",2,null],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or\ndeserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO\nstream.",3,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",4,null],[11,"column","","One-based column number at which the error was detected.",4,null],[11,"classify","","Categorizes the cause of this error.",4,null],[11,"is_io","","Returns true if this error was caused by a failure to read or write\nbytes on an IO stream.",4,null],[11,"is_syntax","","Returns true if this error was caused by input that was not\nsyntactically valid JSON.",4,null],[11,"is_data","","Returns true if this error was caused by input data that was\nsemantically incorrect.",4,null],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of\nthe input data.",4,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"description","","",4,null],[11,"cause","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map&#39;s entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map&#39;s entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map&#39;s entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map&#39;s keys.",null,null],[3,"Values","","An iterator over a serde_json::Map&#39;s values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.\nThis enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",6,null],[11,"get","","Returns a reference to the value corresponding to the key.",6,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,null],[11,"insert","","Inserts a key-value pair into the map.",6,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",6,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place\nmanipulation.",6,null],[11,"len","","Returns the number of elements in the map.",6,null],[11,"is_empty","","Returns true if the map contains no elements.",6,null],[11,"iter","","Gets an iterator over the entries of the map.",6,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,null],[11,"keys","","Gets an iterator over the keys of the map.",6,null],[11,"values","","Gets an iterator over the values of the map.",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"fmt","","",6,null],[11,"serialize","","",6,null],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",6,null],[11,"key","","Returns a reference to this entry&#39;s key.",5,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",5,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",5,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",7,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key, and returns a\nmutable reference to it.",7,null],[11,"key","","Gets a reference to the key in the entry.",8,null],[11,"get","","Gets a reference to the value in the entry.",8,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,null],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`&#39;s key, and returns\nthe entry&#39;s old value.",8,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"len","","",9,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"len","","",10,null],[11,"into_iter","","",6,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"len","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null],[11,"len","","",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"len","","",13,null],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `&quot;`",14,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",14,null],[13,"Solidus","","An escaped solidus `/`",14,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",14,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",14,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",14,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",14,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",14,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as\n`\\u00XX` where `XX` are two hex characters)",14,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO\nstream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",15,null],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",15,null],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",15,null],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",15,null],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",15,null],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",15,null],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",15,null],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",15,null],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",15,null],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",15,null],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,null],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,null],[11,"begin_string","","Called before each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",15,null],[11,"end_string","","Called after each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",15,null],[11,"write_string_fragment","","Writes a string fragment that doesn&#39;t need any escaping to the\nspecified writer.",15,null],[11,"write_char_escape","","Writes a character escape code to the specified writer.",15,null],[11,"begin_array","","Called before every array.  Writes a `[` to the specified\nwriter.",15,null],[11,"end_array","","Called after every array.  Writes a `]` to the specified\nwriter.",15,null],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to\nthe specified writer.",15,null],[11,"end_array_value","","Called after every array value.",15,null],[11,"begin_object","","Called before every object.  Writes a `{` to the specified\nwriter.",15,null],[11,"end_object","","Called after every object.  Writes a `}` to the specified\nwriter.",15,null],[11,"begin_object_key","","Called before every object key.",15,null],[11,"end_object_key","","Called after every object key.  A `:` should be written to the\nspecified writer by either this method or\n`begin_object_value`.",15,null],[11,"begin_object_value","","Called before every object value.  A `:` should be written to\nthe specified writer by either this method or\n`end_object_key`.",15,null],[11,"end_object_value","","Called after every object value.",15,null],[11,"new","","Creates a new JSON serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",16,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",18,null],[11,"end_array","","",18,null],[11,"begin_array_value","","",18,null],[11,"end_array_value","","",18,null],[11,"begin_object","","",18,null],[11,"end_object","","",18,null],[11,"begin_object_key","","",18,null],[11,"begin_object_value","","",18,null],[11,"end_object_value","","",18,null],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent\nany valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or\n`value[&quot;k&quot;]`.",0,null],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or\n`value[&quot;k&quot;] = ...`.",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,null],[11,"deserialize_option","","",0,null],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,null],[11,"deserialize_bool","","",0,null],[11,"deserialize_i8","","",0,null],[11,"deserialize_i16","","",0,null],[11,"deserialize_i32","","",0,null],[11,"deserialize_i64","","",0,null],[11,"deserialize_u8","","",0,null],[11,"deserialize_u16","","",0,null],[11,"deserialize_u32","","",0,null],[11,"deserialize_u64","","",0,null],[11,"deserialize_f32","","",0,null],[11,"deserialize_f64","","",0,null],[11,"deserialize_char","","",0,null],[11,"deserialize_str","","",0,null],[11,"deserialize_string","","",0,null],[11,"deserialize_bytes","","",0,null],[11,"deserialize_byte_buf","","",0,null],[11,"deserialize_unit","","",0,null],[11,"deserialize_unit_struct","","",0,null],[11,"deserialize_seq","","",0,null],[11,"deserialize_tuple","","",0,null],[11,"deserialize_tuple_struct","","",0,null],[11,"deserialize_map","","",0,null],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,null],[11,"deserialize_ignored_any","","",0,null],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get`\nand `get_mut` methods of `Value`.",null,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"get","","Index into a JSON array or map. A string index can be used to access a\nvalue in a map, and a usize index can be used to access an element of an\narray.",0,null],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to\naccess a value in a map, and a usize index can be used to access an\nelement of an array.",0,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None\notherwise.",0,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",0,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None\notherwise.",0,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",0,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,null],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None\notherwise.",0,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,null],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and\n`i64::MAX`.",0,null],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,null],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,null],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns\nNone otherwise.",0,null],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns\nNone otherwise.",0,null],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns\nNone otherwise.",0,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None\notherwise.",0,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,null],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,null],[11,"pointer","","Looks up a value by a JSON Pointer.",0,null],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to\nthat value.",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and\n`i64::MAX`.",19,null],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",19,null],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",19,null],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns\nNone otherwise.",19,null],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns\nNone otherwise.",19,null],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",19,null],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON\nnumbers.",19,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"serialize","","",19,null],[11,"deserialize","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,null],[11,"deserialize_bool","","",19,null],[11,"deserialize_i8","","",19,null],[11,"deserialize_i16","","",19,null],[11,"deserialize_i32","","",19,null],[11,"deserialize_i64","","",19,null],[11,"deserialize_u8","","",19,null],[11,"deserialize_u16","","",19,null],[11,"deserialize_u32","","",19,null],[11,"deserialize_u64","","",19,null],[11,"deserialize_f32","","",19,null],[11,"deserialize_f64","","",19,null],[11,"deserialize_char","","",19,null],[11,"deserialize_str","","",19,null],[11,"deserialize_string","","",19,null],[11,"deserialize_bytes","","",19,null],[11,"deserialize_byte_buf","","",19,null],[11,"deserialize_option","","",19,null],[11,"deserialize_unit","","",19,null],[11,"deserialize_unit_struct","","",19,null],[11,"deserialize_newtype_struct","","",19,null],[11,"deserialize_seq","","",19,null],[11,"deserialize_tuple","","",19,null],[11,"deserialize_tuple_struct","","",19,null],[11,"deserialize_map","","",19,null],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,null],[11,"deserialize_ignored_any","","",19,null],[11,"from","","",19,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",20,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"peek","","",20,null],[11,"discard","","",20,null],[11,"position","","",20,null],[11,"peek_position","","",20,null],[11,"byte_offset","","",20,null],[11,"parse_str","","",20,null],[11,"parse_str_raw","","",20,null],[11,"new","","Create a JSON input source to read from a slice of bytes.",21,null],[11,"next","","",21,null],[11,"peek","","",21,null],[11,"discard","","",21,null],[11,"position","","",21,null],[11,"peek_position","","",21,null],[11,"byte_offset","","",21,null],[11,"parse_str","","",21,null],[11,"parse_str_raw","","",21,null],[11,"new","","Create a JSON input source to read from a UTF-8 string.",22,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"peek","","",22,null],[11,"discard","","",22,null],[11,"position","","",22,null],[11,"peek_position","","",22,null],[11,"byte_offset","","",22,null],[11,"parse_str","","",22,null],[11,"parse_str_raw","","",22,null],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into&lt;String&gt;`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",25,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",25,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `&quot;foo&quot;`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is\nallowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\n`typeck::collect::compute_bounds` matches these against\nthe &quot;special&quot; built-in traits (see `middle::lang_items`) and\ndetects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`&quot;foo&quot;`)",39,null],[13,"ByteStr","","A byte string (`b&quot;foo&quot;`)",39,null],[13,"Byte","","A byte char (`b&#39;f&#39;`)",39,null],[13,"Char","","A character literal (`&#39;a&#39;`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `&quot;foo&quot;`",40,null],[13,"Raw","","A raw string, like `r##&quot;foo&quot;##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It&#39;s an enum.",45,null],[13,"Struct","","It&#39;s a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&amp;&amp;` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&amp;` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `&lt;&lt;` operator (shift left)",46,null],[13,"Shr","","The `&gt;&gt;` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `&lt;` operator (less than)",46,null],[13,"Le","","The `&lt;=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `&gt;=` operator (greater than or equal to)",46,null],[13,"Gt","","The `&gt;` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `&lt;&#39;a, A, B, C&gt;` in `foo::bar::baz::&lt;&#39;a, A, B, C&gt;`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -&gt; C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;Vec&lt;T&gt; as SomeTrait&gt;::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3`\nwhere `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type\nwhere `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,null],[11,"to_tokens","","",29,null],[11,"to_tokens","","",30,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"name","","",0,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"eq","","",28,null],[11,"hash","","",28,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"hash","","",30,null],[11,"to_tokens","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"hash","","",31,null],[11,"to_tokens","","",2,null],[11,"to_tokens","","",32,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",33,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"hash","","",33,null],[11,"to_tokens","","",3,null],[11,"to_tokens","","",54,null],[11,"to_tokens","","",55,null],[11,"to_tokens","","",56,null],[11,"to_tokens","","",4,null],[11,"to_tokens","","",5,null],[11,"to_tokens","","",6,null],[11,"to_tokens","","",35,null],[11,"to_tokens","","",8,null],[11,"to_tokens","","",36,null],[11,"to_tokens","","",7,null],[11,"to_tokens","","",10,null],[11,"to_tokens","","",9,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,null],[11,"fmt","","",55,null],[11,"fmt","","",56,null],[11,"split_for_impl","","Split a type&#39;s generics into the pieces required for impl&#39;ing a trait\nfor that type.",3,null],[11,"as_turbofish","","Turn a type&#39;s generics like `&lt;X, Y&gt;` into a turbofish like `::&lt;X, Y&gt;`.",55,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"hash","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,null],[11,"clone","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"hash","","",35,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"hash","","",34,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,null],[11,"clone","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"hash","","",36,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"hash","","",9,null],[11,"to_tokens","","",57,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"hash","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,null],[11,"fmt","","",57,null],[11,"eq","","",57,null],[11,"to_tokens","","",39,null],[11,"fmt","","",38,null],[11,"fmt","","",37,null],[11,"fmt","","",39,null],[11,"clone","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"hash","","",39,null],[11,"fmt","","",40,null],[11,"clone","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"eq","","",38,null],[11,"hash","","",38,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"eq","","",37,null],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"to_tokens","","",16,null],[11,"to_tokens","","",44,null],[11,"to_tokens","","",15,null],[11,"to_tokens","","",43,null],[11,"to_tokens","","",41,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"hash","","",16,null],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"hash","","",44,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"hash","","",15,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"hash","","",43,null],[11,"fmt","","",41,null],[11,"clone","","",41,null],[11,"eq","","",41,null],[11,"hash","","",41,null],[11,"fmt","","",42,null],[11,"clone","","",42,null],[11,"eq","","",42,null],[11,"hash","","",42,null],[11,"to_tokens","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"hash","","",17,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"hash","","",45,null],[11,"op","","",46,null],[11,"assign_op","","",46,null],[11,"to_tokens","","",46,null],[11,"op","","",47,null],[11,"to_tokens","","",47,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"eq","","",46,null],[11,"hash","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"eq","","",47,null],[11,"hash","","",47,null],[11,"to_tokens","","",52,null],[11,"to_tokens","","",50,null],[11,"to_tokens","","",23,null],[11,"to_tokens","","",24,null],[11,"to_tokens","","",51,null],[11,"to_tokens","","",18,null],[11,"to_tokens","","",27,null],[11,"to_tokens","","",22,null],[11,"to_tokens","","",25,null],[11,"to_tokens","","",20,null],[11,"to_tokens","","",19,null],[11,"to_tokens","","",53,null],[11,"to_tokens","","",48,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"hash","","",52,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"eq","","",50,null],[11,"hash","","",50,null],[11,"fmt","","",23,null],[11,"clone","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,null],[11,"clone","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"hash","","",27,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"hash","","",22,null],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"hash","","",25,null],[11,"fmt","","",26,null],[11,"clone","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"hash","","",26,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"hash","","",20,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"eq","","",53,null],[11,"hash","","",53,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"hash","","",48,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"hash","","",19,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,null],[11,"visit_derive_input","","",58,null],[11,"visit_ty","","",58,null],[11,"visit_generics","","",58,null],[11,"visit_ty_param_bound","","",58,null],[11,"visit_poly_trait_ref","","",58,null],[11,"visit_variant_data","","",58,null],[11,"visit_field","","",58,null],[11,"visit_variant","","",58,null],[11,"visit_lifetime","","",58,null],[11,"visit_lifetime_def","","",58,null],[11,"visit_path","","",58,null],[11,"visit_path_segment","","",58,null],[11,"visit_path_parameters","","",58,null],[11,"visit_assoc_type_binding","","",58,null],[11,"visit_attribute","","",58,null],[11,"visit_fn_ret_ty","","",58,null],[11,"visit_const_expr","","",58,null],[11,"visit_lit","","",58,null],[11,"visit_mac","","",58,null],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to\nparse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed\ndata and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a\nmessage based on the given string if the parse failed or is incomplete.",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from [`nom`](https://github.com/Geal/nom) by removing the\n`IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed\ndata and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a\nmessage based on the given string if the parse failed or is incomplete.",0,null],[14,"punct","","Parse a piece of punctuation like &quot;+&quot; or &quot;+=&quot;.",null,null],[14,"keyword","","Parse a keyword like &quot;fn&quot; or &quot;struct&quot;.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself\nreturn a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing\nseperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is\nallowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any\nof the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail\nto parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You\nalmost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to\n`switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing\nseparator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which\nsucceeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results\na name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to\n[Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the &#39;XID_Start&#39;\nUnicode property.",0,null],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the &#39;XID_Continue&#39;\nUnicode property.",0,null]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"# unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option&lt;T&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,null],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,null],[8,"UncheckedResultExt","","An extension trait for `Result&lt;T, E&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,null],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,null]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,null],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["zmq"] = {"doc":"Module: zmq","items":[[3,"Context","zmq","Handle for a 0MQ context, used to create sockets.",null,null],[3,"Socket","","A socket, the central object in 0MQ.",null,null],[3,"Message","","Holds a 0MQ message.",null,null],[3,"PollItem","","Represents a handle that can be `poll()`ed.",null,null],[3,"CurveKeyPair","","A CURVE key pair generated by 0MQ.",null,null],[12,"public_key","","",0,null],[12,"secret_key","","",0,null],[4,"SocketType","","Socket types",null,null],[13,"PAIR","","",1,null],[13,"PUB","","",1,null],[13,"SUB","","",1,null],[13,"REQ","","",1,null],[13,"REP","","",1,null],[13,"DEALER","","",1,null],[13,"ROUTER","","",1,null],[13,"PULL","","",1,null],[13,"PUSH","","",1,null],[13,"XPUB","","",1,null],[13,"XSUB","","",1,null],[13,"STREAM","","",1,null],[4,"Constants","","Raw 0MQ socket option constants.",null,null],[13,"ZMQ_AFFINITY","","",2,null],[13,"ZMQ_IDENTITY","","",2,null],[13,"ZMQ_SUBSCRIBE","","",2,null],[13,"ZMQ_UNSUBSCRIBE","","",2,null],[13,"ZMQ_RATE","","",2,null],[13,"ZMQ_RECOVERY_IVL","","",2,null],[13,"ZMQ_SNDBUF","","",2,null],[13,"ZMQ_RCVBUF","","",2,null],[13,"ZMQ_RCVMORE","","",2,null],[13,"ZMQ_FD","","",2,null],[13,"ZMQ_EVENTS","","",2,null],[13,"ZMQ_TYPE","","",2,null],[13,"ZMQ_LINGER","","",2,null],[13,"ZMQ_RECONNECT_IVL","","",2,null],[13,"ZMQ_BACKLOG","","",2,null],[13,"ZMQ_RECONNECT_IVL_MAX","","",2,null],[13,"ZMQ_MAXMSGSIZE","","",2,null],[13,"ZMQ_SNDHWM","","",2,null],[13,"ZMQ_RCVHWM","","",2,null],[13,"ZMQ_MULTICAST_HOPS","","",2,null],[13,"ZMQ_RCVTIMEO","","",2,null],[13,"ZMQ_SNDTIMEO","","",2,null],[13,"ZMQ_LAST_ENDPOINT","","",2,null],[13,"ZMQ_ROUTER_MANDATORY","","",2,null],[13,"ZMQ_TCP_KEEPALIVE","","",2,null],[13,"ZMQ_TCP_KEEPALIVE_CNT","","",2,null],[13,"ZMQ_TCP_KEEPALIVE_IDLE","","",2,null],[13,"ZMQ_TCP_KEEPALIVE_INTVL","","",2,null],[13,"ZMQ_IMMEDIATE","","",2,null],[13,"ZMQ_XPUB_VERBOSE","","",2,null],[13,"ZMQ_ROUTER_RAW","","",2,null],[13,"ZMQ_IPV6","","",2,null],[13,"ZMQ_MECHANISM","","",2,null],[13,"ZMQ_PLAIN_SERVER","","",2,null],[13,"ZMQ_PLAIN_USERNAME","","",2,null],[13,"ZMQ_PLAIN_PASSWORD","","",2,null],[13,"ZMQ_CURVE_SERVER","","",2,null],[13,"ZMQ_CURVE_PUBLICKEY","","",2,null],[13,"ZMQ_CURVE_SECRETKEY","","",2,null],[13,"ZMQ_CURVE_SERVERKEY","","",2,null],[13,"ZMQ_PROBE_ROUTER","","",2,null],[13,"ZMQ_REQ_CORRELATE","","",2,null],[13,"ZMQ_REQ_RELAXED","","",2,null],[13,"ZMQ_CONFLATE","","",2,null],[13,"ZMQ_ZAP_DOMAIN","","",2,null],[13,"ZMQ_ROUTER_HANDOVER","","",2,null],[13,"ZMQ_TOS","","",2,null],[13,"ZMQ_CONNECT_RID","","",2,null],[13,"ZMQ_GSSAPI_SERVER","","",2,null],[13,"ZMQ_GSSAPI_PRINCIPAL","","",2,null],[13,"ZMQ_GSSAPI_SERVICE_PRINCIPAL","","",2,null],[13,"ZMQ_GSSAPI_PLAINTEXT","","",2,null],[13,"ZMQ_HANDSHAKE_IVL","","",2,null],[13,"ZMQ_SOCKS_PROXY","","",2,null],[13,"ZMQ_XPUB_NODROP","","",2,null],[13,"ZMQ_MSG_MORE","","",2,null],[13,"ZMQ_MSG_SHARED","","",2,null],[13,"ZMQ_MSG_MASK","","",2,null],[4,"Mechanism","","Security Mechanism",null,null],[13,"ZMQ_NULL","","",3,null],[13,"ZMQ_PLAIN","","",3,null],[13,"ZMQ_CURVE","","",3,null],[13,"ZMQ_GSSAPI","","",3,null],[4,"Error","","An error returned by a 0MQ API function.",null,null],[13,"EACCES","","",4,null],[13,"EADDRINUSE","","",4,null],[13,"EAGAIN","","",4,null],[13,"EBUSY","","",4,null],[13,"ECONNREFUSED","","",4,null],[13,"EFAULT","","",4,null],[13,"EINTR","","",4,null],[13,"EHOSTUNREACH","","",4,null],[13,"EINPROGRESS","","",4,null],[13,"EINVAL","","",4,null],[13,"EMFILE","","",4,null],[13,"EMSGSIZE","","",4,null],[13,"ENAMETOOLONG","","",4,null],[13,"ENODEV","","",4,null],[13,"ENOENT","","",4,null],[13,"ENOMEM","","",4,null],[13,"ENOTCONN","","",4,null],[13,"ENOTSOCK","","",4,null],[13,"EPROTO","","",4,null],[13,"EPROTONOSUPPORT","","",4,null],[13,"ENOTSUP","","",4,null],[13,"ENOBUFS","","",4,null],[13,"ENETDOWN","","",4,null],[13,"EADDRNOTAVAIL","","",4,null],[13,"EFSM","","",4,null],[13,"ENOCOMPATPROTO","","",4,null],[13,"ETERM","","",4,null],[13,"EMTHREAD","","",4,null],[4,"EncodeError","","Errors that can occur while encoding Z85.",null,null],[13,"BadLength","","",5,null],[13,"FromUtf8Error","","",5,null],[4,"DecodeError","","Errors that can occur while decoding Z85.",null,null],[13,"BadLength","","The input string slice&#39;s length was not a multiple of 5.",6,null],[13,"NulError","","The input string slice had embedded NUL bytes.",6,null],[5,"version","","Return the current zeromq version, as `(major, minor, patch)`.",null,null],[5,"poll","","Poll for events on multiple sockets.",null,null],[5,"proxy","","Start a 0MQ proxy in the current thread.",null,{"inputs":[{"name":"socket"},{"name":"socket"}],"output":{"name":"result"}}],[5,"proxy_with_capture","","Start a 0MQ proxy in the current thread, with a capture socket.",null,{"inputs":[{"name":"socket"},{"name":"socket"},{"name":"socket"}],"output":{"name":"result"}}],[5,"has","","Return true if the used 0MQ library has the given capability.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"z85_encode","","Encode a binary key as Z85 printable text.",null,null],[5,"z85_decode","","Decode a binary key from Z85-encoded text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[6,"Result","","`zmq`-specific Result type.",null,null],[6,"PollEvents","","Type representing pending socket events.",null,null],[7,"DONTWAIT","","Flag for socket `send` methods that specifies non-blocking mode.",null,null],[7,"SNDMORE","","Flag for socket `send` methods that specifies that more frames of a\nmultipart message will follow.",null,null],[7,"POLLIN","","For `poll()`, specifies to signal when a message/some data can be read from\na socket.",null,null],[7,"POLLOUT","","For `poll()`, specifies to signal when a message/some data can be written to\na socket.",null,null],[7,"POLLERR","","For `poll()`, specifies to signal when an error condition is present on a\nsocket.  This only applies to non-0MQ sockets.",null,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"to_raw","","",2,null],[11,"from_raw","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"to_raw","","",4,null],[11,"from_raw","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"description","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","Return the error string for an error.",4,null],[11,"clone","","",7,null],[11,"new","","Create a new reference-counted context handle.",7,{"inputs":[],"output":{"name":"context"}}],[11,"socket","","Create a new socket.",7,null],[11,"destroy","","Try to destroy the context. This is different than the destructor; the\ndestructor will loop when zmq_ctx_destroy returns EINTR.",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"drop","","",8,null],[11,"into_raw","","Consume the Socket and return the raw socket pointer.",8,null],[11,"from_raw","","Create a Socket from a raw socket pointer.",8,null],[11,"as_mut_ptr","","Return the inner pointer to this Socket.",8,null],[11,"bind","","Accept connections on a socket.",8,null],[11,"connect","","Connect a socket.",8,null],[11,"send","","Send a `&amp;[u8]` message.",8,null],[11,"send_msg","","Send a `Message` message.",8,null],[11,"send_str","","",8,null],[11,"send_multipart","","",8,null],[11,"recv","","Receive a message into a `Message`. The length passed to zmq_msg_recv\nis the length of the buffer.",8,null],[11,"recv_into","","Receive bytes into a slice. The length passed to `zmq_recv` is the length of the slice. The\nreturn value is the number of bytes in the message, which may be larger than the length of\nthe slice, indicating truncation.",8,null],[11,"recv_msg","","Receive a message into a fresh `Message`.",8,null],[11,"recv_bytes","","Receive a message as a byte vector.",8,null],[11,"recv_string","","Receive a `String` from the socket.",8,null],[11,"recv_multipart","","Receive a multipart message from the socket.",8,null],[11,"is_ipv6","","Accessor for the `ZMQ_IPV6` option.",8,null],[11,"set_ipv6","","Accessor for the `ZMQ_IPV6` option.",8,null],[11,"is_immediate","","Accessor for the `ZMQ_IMMEDIATE` option.",8,null],[11,"set_immediate","","Accessor for the `ZMQ_IMMEDIATE` option.",8,null],[11,"is_plain_server","","Accessor for the `ZMQ_PLAIN_SERVER` option.",8,null],[11,"set_plain_server","","Accessor for the `ZMQ_PLAIN_SERVER` option.",8,null],[11,"is_conflate","","Accessor for the `ZMQ_CONFLATE` option.",8,null],[11,"set_conflate","","Accessor for the `ZMQ_CONFLATE` option.",8,null],[11,"is_curve_server","","",8,null],[11,"set_curve_server","","",8,null],[11,"get_socket_type","","Return the type of this socket.",8,null],[11,"get_rcvmore","","Return true if there are more frames of a multipart message to receive.",8,null],[11,"get_maxmsgsize","","",8,null],[11,"set_maxmsgsize","","",8,null],[11,"get_sndhwm","","",8,null],[11,"set_sndhwm","","",8,null],[11,"get_rcvhwm","","",8,null],[11,"set_rcvhwm","","",8,null],[11,"get_affinity","","",8,null],[11,"set_affinity","","",8,null],[11,"get_rate","","",8,null],[11,"set_rate","","",8,null],[11,"get_recovery_ivl","","",8,null],[11,"set_recovery_ivl","","",8,null],[11,"get_sndbuf","","",8,null],[11,"set_sndbuf","","",8,null],[11,"get_rcvbuf","","",8,null],[11,"set_rcvbuf","","",8,null],[11,"get_tos","","",8,null],[11,"set_tos","","",8,null],[11,"get_linger","","",8,null],[11,"set_linger","","",8,null],[11,"get_reconnect_ivl","","",8,null],[11,"set_reconnect_ivl","","",8,null],[11,"get_reconnect_ivl_max","","",8,null],[11,"set_reconnect_ivl_max","","",8,null],[11,"get_backlog","","",8,null],[11,"set_backlog","","",8,null],[11,"get_fd","","Get the event notification file descriptor.",8,null],[11,"get_events","","Get the currently pending events.",8,null],[11,"get_multicast_hops","","",8,null],[11,"set_multicast_hops","","",8,null],[11,"get_rcvtimeo","","",8,null],[11,"set_rcvtimeo","","",8,null],[11,"get_sndtimeo","","",8,null],[11,"set_sndtimeo","","",8,null],[11,"get_tcp_keepalive","","",8,null],[11,"set_tcp_keepalive","","",8,null],[11,"get_tcp_keepalive_cnt","","",8,null],[11,"set_tcp_keepalive_cnt","","",8,null],[11,"get_tcp_keepalive_idle","","",8,null],[11,"set_tcp_keepalive_idle","","",8,null],[11,"get_tcp_keepalive_intvl","","",8,null],[11,"set_tcp_keepalive_intvl","","",8,null],[11,"get_handshake_ivl","","",8,null],[11,"set_handshake_ivl","","",8,null],[11,"set_identity","","",8,null],[11,"set_subscribe","","",8,null],[11,"set_unsubscribe","","",8,null],[11,"get_identity","","",8,null],[11,"get_socks_proxy","","",8,null],[11,"get_mechanism","","",8,null],[11,"get_plain_username","","",8,null],[11,"get_plain_password","","",8,null],[11,"get_zap_domain","","",8,null],[11,"get_last_endpoint","","Return the address of the last endpoint this socket was bound to.",8,null],[11,"get_curve_publickey","","",8,null],[11,"get_curve_secretkey","","",8,null],[11,"get_curve_serverkey","","",8,null],[11,"set_socks_proxy","","",8,null],[11,"set_plain_username","","",8,null],[11,"set_plain_password","","",8,null],[11,"set_zap_domain","","",8,null],[11,"set_curve_publickey","","",8,null],[11,"set_curve_secretkey","","",8,null],[11,"set_curve_serverkey","","",8,null],[11,"as_poll_item","","Create a `PollItem` from the socket.",8,null],[11,"poll","","Do a call to `zmq_poll` with only this socket.",8,null],[11,"eq","","",9,null],[11,"drop","","",9,null],[11,"fmt","","",9,null],[11,"new","","Create an empty `Message`.",9,{"inputs":[],"output":{"name":"result"}}],[11,"with_capacity_unallocated","","Create a `Message` preallocated with `len` uninitialized bytes.",9,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"with_capacity","","Create a `Message` with space for `len` bytes that are initialized to 0.",9,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"from_slice","","Create a `Message` from a `&amp;[u8]`. This will copy `data` into the message.",9,null],[11,"as_str","","Return the message content as a string slice if it is valid UTF-8.",9,null],[11,"get_more","","Return the `ZMQ_MORE` flag, which indicates if more parts of a multipart\nmessage will follow.",9,null],[11,"gets","","Query a message metadata property.",9,null],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"from_fd","","Construct a PollItem from a non-0MQ socket, given by its file\ndescriptor.",10,{"inputs":[{"name":"rawfd"}],"output":{"name":"pollitem"}}],[11,"get_revents","","Retrieve the events that occurred for this handle.",10,null],[11,"is_readable","","Returns true if the polled socket has messages ready to receive.",10,null],[11,"is_writable","","Returns true if the polled socket can accept messages to be sent\nwithout blocking.",10,null],[11,"is_error","","Returns true if the polled socket encountered an error condition.",10,null],[11,"fmt","","",0,null],[11,"new","","Create a new key pair.",0,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"fmt","","",6,null],[11,"from","","",6,{"inputs":[{"name":"nulerror"}],"output":{"name":"self"}}],[11,"fmt","","",6,null],[11,"description","","",6,null]],"paths":[[3,"CurveKeyPair"],[4,"SocketType"],[4,"Constants"],[4,"Mechanism"],[4,"Error"],[4,"EncodeError"],[4,"DecodeError"],[3,"Context"],[3,"Socket"],[3,"Message"],[3,"PollItem"]]};
searchIndex["zmq_sys"] = {"doc":"","items":[[6,"RawFd","zmq_sys","Raw file descriptors.",null,null],[0,"errno","","",null,null],[17,"EACCES","zmq_sys::errno","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EBUSY","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EFAULT","","",null,null],[17,"EINTR","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EINVAL","","",null,null],[17,"EMFILE","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOENT","","",null,null],[17,"ENOMEM","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EPROTO","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"ENOBUFS","","",null,null],[17,"ENETDOWN","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"EFSM","","",null,null],[17,"ENOCOMPATPROTO","","",null,null],[17,"ETERM","","",null,null],[17,"EMTHREAD","","",null,null],[6,"zmq_msg_t","zmq_sys","",null,null],[6,"zmq_free_fn","","",null,null],[6,"zmq_pollitem_t","","",null,null]],"paths":[]};
initSearch(searchIndex);
